{"ast":null,"code":"import axios from 'axios';\n\nclass MessageParser {\n  constructor(actionProvider) {\n    this.actionProvider = actionProvider;\n  }\n\n  parse(message) {\n    console.log(\"User Message:\", message);\n    const lowercase = message.toLowerCase(); // if (lowercase.includes(\"quiz\")) {\n    //   this.actionProvider.quiz();\n    // }\n    // if (lowercase.includes(\"video\")) {\n    //   this.actionProvider.video();\n    // }\n\n    if (lowercase.includes(\"weather\")) {\n      this.actionProvider.weather();\n    }\n\n    const data = {\n      \"languageCode\": \"en\",\n      \"queryText\": message,\n      \"sessionId\": \"121212213\"\n    };\n    axios.post('http://localhost:3000/dialogflow', data).then(response => {\n      console.log(\"Frontend:\", response.data); // console.log(\"response:\",response)\n      // console.log(\"data->query\",data.queryText);\n      // if(data.queryText==\"tomorrow\")\n      // {\n      //   const temp1=response.data.fulfillmentMessages[1].payload.fields.richContent;\n      //   console.log(\"Inside Temp\",temp1);\n      //   this.actionProvider.botMessage(response.data.fulfillmentMessages[1].payload.richContent[0][0].options[0].text); \n      // }\n      // else\n\n      this.actionProvider.botMessage(response.data.fulfillmentText);\n      console.log(\"Fulfillment text:\", response.data.fulfillmentText); // console.log(\"Fulfillment message:\",response.data.fulfillmentMessages);\n\n      const fulfillmentMessages = response.data.fulfillmentMessages; // fulfillmentMessages.map(messsage =>{\n      //   var text = message.text;\n      //   var payload = message.payload;\n      //   if(text)\n      //   {\n      //     this.actionProvider.botMessage(text.text[0]);\n      //   }\n      //   if(payload)\n      //   {\n      //     var richContent = payload.richContent[0];\n      //     if(richContent.types==\"chips\")\n      //     {\n      //       options = richContent.options;\n      //       this.actionProvider\n      //     }\n      //   }\n      // })\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/Users/kishanprajapati/web-chatbot/client/src/chatbot/MessageParser.js"],"names":["axios","MessageParser","constructor","actionProvider","parse","message","console","log","lowercase","toLowerCase","includes","weather","data","post","then","response","botMessage","fulfillmentText","fulfillmentMessages","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAC1B,SAAKA,cAAL,GAAsBA,cAAtB;AACD;;AAEDC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,OAA7B;AACA,UAAMG,SAAS,GAAGH,OAAO,CAACI,WAAR,EAAlB,CAFa,CAIb;AACA;AACA;AACA;AACA;AACA;;AACA,QAAID,SAAS,CAACE,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,WAAKP,cAAL,CAAoBQ,OAApB;AACD;;AACC,UAAMC,IAAI,GAAG;AACX,sBAAe,IADJ;AAEX,mBAAYP,OAFD;AAGX,mBAAY;AAHD,KAAb;AAKFL,IAAAA,KAAK,CAACa,IAAN,CAAW,kCAAX,EAA8CD,IAA9C,EACKE,IADL,CACUC,QAAQ,IAAG;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBQ,QAAQ,CAACH,IAAjC,EADa,CAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKT,cAAL,CAAoBa,UAApB,CAA+BD,QAAQ,CAACH,IAAT,CAAcK,eAA7C;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCQ,QAAQ,CAACH,IAAT,CAAcK,eAA9C,EAZa,CAab;;AACA,YAAMC,mBAAmB,GAAGH,QAAQ,CAACH,IAAT,CAAcM,mBAA1C,CAda,CAgBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEH,KApCL,EAoCOC,KApCP,CAoCcC,KAAD,IAAW;AAClBd,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH,KAtCH;AAwCD;;AA/DiB;;AAkEpB,eAAenB,aAAf","sourcesContent":["import axios from 'axios';\n\nclass MessageParser {\n  constructor(actionProvider) {\n    this.actionProvider = actionProvider;\n  }\n\n  parse(message) {\n    console.log(\"User Message:\", message);\n    const lowercase = message.toLowerCase();\n    \n    // if (lowercase.includes(\"quiz\")) {\n    //   this.actionProvider.quiz();\n    // }\n    // if (lowercase.includes(\"video\")) {\n    //   this.actionProvider.video();\n    // }\n    if (lowercase.includes(\"weather\")) {\n      this.actionProvider.weather();\n    }\n      const data = {\n        \"languageCode\":\"en\",\n        \"queryText\":message,\n        \"sessionId\":\"121212213\"\n    } \n    axios.post('http://localhost:3000/dialogflow',data)\n        .then(response =>{\n            console.log(\"Frontend:\",response.data);\n            // console.log(\"response:\",response)\n            // console.log(\"data->query\",data.queryText);\n            // if(data.queryText==\"tomorrow\")\n            // {\n            //   const temp1=response.data.fulfillmentMessages[1].payload.fields.richContent;\n            //   console.log(\"Inside Temp\",temp1);\n            //   this.actionProvider.botMessage(response.data.fulfillmentMessages[1].payload.richContent[0][0].options[0].text); \n            // }\n            // else\n            this.actionProvider.botMessage(response.data.fulfillmentText);\n            console.log(\"Fulfillment text:\",response.data.fulfillmentText);\n            // console.log(\"Fulfillment message:\",response.data.fulfillmentMessages);\n            const fulfillmentMessages = response.data.fulfillmentMessages;\n\n            // fulfillmentMessages.map(messsage =>{\n            //   var text = message.text;\n            //   var payload = message.payload;\n            //   if(text)\n            //   {\n            //     this.actionProvider.botMessage(text.text[0]);\n            //   }\n            //   if(payload)\n            //   {\n            //     var richContent = payload.richContent[0];\n            //     if(richContent.types==\"chips\")\n            //     {\n            //       options = richContent.options;\n            //       this.actionProvider\n            //     }\n            //   }\n\n            // })\n     \n        }).catch((error) => {\n          console.log(error)\n      });\n\n  }\n}\n\nexport default MessageParser;\n\n"]},"metadata":{},"sourceType":"module"}